
package com.phone.dir.application.contact_registry_apis_soap;

import javax.xml.namespace.QName;
import javax.xml.ws.*;
import java.net.MalformedURLException;
import java.net.URL;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.3.2
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "ContactsWebServiceService", targetNamespace = "http://contact_registry_apis_soap.webservice.registry.contact/", wsdlLocation = "http://localhost:8080/Contact_Registry_Web_App_war/ws/contacts?wsdl")
public class ContactsWebServiceService
    extends Service
{

    private final static URL CONTACTSWEBSERVICESERVICE_WSDL_LOCATION;
    private final static WebServiceException CONTACTSWEBSERVICESERVICE_EXCEPTION;
    private final static QName CONTACTSWEBSERVICESERVICE_QNAME = new QName("http://contact_registry_apis_soap.webservice.registry.contact/", "ContactsWebServiceService");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("http://localhost:8080/Contact_Registry_Web_App_war/ws/contacts?wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        CONTACTSWEBSERVICESERVICE_WSDL_LOCATION = url;
        CONTACTSWEBSERVICESERVICE_EXCEPTION = e;
    }

    public ContactsWebServiceService() {
        super(__getWsdlLocation(), CONTACTSWEBSERVICESERVICE_QNAME);
    }

    public ContactsWebServiceService(WebServiceFeature... features) {
        super(__getWsdlLocation(), CONTACTSWEBSERVICESERVICE_QNAME, features);
    }

    public ContactsWebServiceService(URL wsdlLocation) {
        super(wsdlLocation, CONTACTSWEBSERVICESERVICE_QNAME);
    }

    public ContactsWebServiceService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, CONTACTSWEBSERVICESERVICE_QNAME, features);
    }

    public ContactsWebServiceService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ContactsWebServiceService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns ContactsWebService
     */
    @WebEndpoint(name = "ContactsWebServicePort")
    public ContactsWebService getContactsWebServicePort() {
        return super.getPort(new QName("http://contact_registry_apis_soap.webservice.registry.contact/", "ContactsWebServicePort"), ContactsWebService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ContactsWebService
     */
    @WebEndpoint(name = "ContactsWebServicePort")
    public ContactsWebService getContactsWebServicePort(WebServiceFeature... features) {
        return super.getPort(new QName("http://contact_registry_apis_soap.webservice.registry.contact/", "ContactsWebServicePort"), ContactsWebService.class, features);
    }

    private static URL __getWsdlLocation() {
        if (CONTACTSWEBSERVICESERVICE_EXCEPTION!= null) {
            throw CONTACTSWEBSERVICESERVICE_EXCEPTION;
        }
        return CONTACTSWEBSERVICESERVICE_WSDL_LOCATION;
    }

}
